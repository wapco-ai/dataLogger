--- a/src/components/localStorageHooks.jsx
+++ b/src/components/localStorageHooks.jsx
@@ const importMapData = (file) => {
-      // 2) GeoJSON FeatureCollection
+      // 2) GeoJSON FeatureCollection (with unique IDs)
       if (
         importedData.type === 'FeatureCollection' &&
         Array.isArray(importedData.features)
       ) {
-        const existingMarkers = JSON.parse(localStorage.getItem('mapMarkers') || '[]');
-        const existingPaths   = JSON.parse(localStorage.getItem('mapPaths')   || '[]');
-        let nextId = Date.now();
+        const existingMarkers = JSON.parse(localStorage.getItem('mapMarkers') || '[]');
+        const existingPaths   = JSON.parse(localStorage.getItem('mapPaths')   || '[]');

         const parsedMarkers = [];
         const parsedPaths   = [];

         importedData.features.forEach((feature) => {
           const { geometry, properties = {} } = feature;
           if (!geometry) return;

           if (geometry.type === 'Point') {
             const [lng, lat] = geometry.coordinates;
-            parsedMarkers.push({
-              id:        nextId++,
+            parsedMarkers.push({
+              // use a true UUID for no collisions:
+              id:        crypto.randomUUID(),
               position: [lat, lng],
               data:     properties,
               timestamp: properties.timestamp || new Date().toISOString()
             });
           }
           else if (geometry.type === 'LineString') {
             const coords = geometry.coordinates.map(([lng, lat]) => [lat, lng]);
-            parsedPaths.push({
-              id:          nextId++,
+            parsedPaths.push({
+              id:          crypto.randomUUID(),
               name:        properties.name || '',
               description: properties.description || '',
               type:        properties.type || '',
               coordinates: coords,
               timestamp:   properties.timestamp || new Date().toISOString()
             });
           }
         });

-        const mergedMarkers = existingMarkers.concat(parsedMarkers);
-        const mergedPaths   = existingPaths.concat(parsedPaths);
+        const mergedMarkers = existingMarkers.concat(parsedMarkers);
+        const mergedPaths   = existingPaths.concat(parsedPaths);

         localStorage.setItem('mapMarkers', JSON.stringify(mergedMarkers));
         localStorage.setItem('mapPaths',   JSON.stringify(mergedPaths));

         return resolve({ markers: mergedMarkers, paths: mergedPaths });
       }
